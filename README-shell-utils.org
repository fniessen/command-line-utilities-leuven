#+TITLE:     Shell utilities
#+AUTHOR:    Fabrice Niessen
#+EMAIL:     (concat "fniessen" at-sign "pirilampo.org")
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en

#+PROPERTY:  header-args :eval no
#+SETUPFILE: ~/org/theme-readtheorg.setup

#+name: current-time
#+begin_src emacs-lisp :eval yes :results value silent :tangle no
(format-time-string "%Y%m%d.%H%M")
#+end_src

* Context

https://explainshell.com/explain?cmd=find%20.%20-type%20f%20-iname%20%22*.m%22%20-exec%20rgrep.1%20-i%20%22Content%22%20%7B%7D%20%2B

** Description

The shell utilities are core shell functions and scripts which I wrote when
doing my day-to-day tasks.  Over time, this will become a *powerful toolkit*.

#+begin_note
Library of Babel needs the ~#+name~ field to "ingest" a code block -- for Org mode
users.
#+end_note

** See also

For similar collections, see:

- http://icodesnippet.com/
- http://exploitsdownload.com/
- http://code.google.com/
- [[https://bbs.archlinux.org/viewtopic.php?id=56646&p=1][Post your handy self made command line utilities]]

** Prerequisites

- Clear
- Diff
- Iconv

** About portability

[[ supports a wider range of tests in both cases, and has custom parsing rules
that avoid the need for quoting variables, operators, and so on. If you're
specifically using either Bash or zsh, use [[. If you're writing a portable
script, write to the POSIX-compatible [ / test command (which may or may not be
a real command on your running system).

Just use [[ there and forget [ exists.

* Core utilities

** Reverse the order of lines in a file

tac (the, ahem, reverse of cat). Part of coreutils.

Flipping one file into another

#+begin_src shell
tac INFILE > OUTFILE
#+end_src

** Difference between two directories

#+begin_src shell
colordiff -urb dir1 dir2
colordiff -qr dir1 dir2 | sort
#+end_src

Options explained:
- -q :: Output only whether files differ!
- -u :: Output NUM (default 3) lines of unified context.
- -r :: Recursively compare any subdirectories found.
- -b :: Ignore white space changes.

* Shell aliases

XXX Do they need to be added to =~/.bash_aliases=?

** Remove duplicate lines without sorting

How to *delete duplicate lines* in a file *without sorting* it?

#+begin_src shell :tangle bin/remove-duplicate-lines
# Remove duplicate entries in a file without sorting.
# remove-duplicate-lines FILE...
awk '!seen[$0]++'
#+end_src

https://stackoverflow.com/questions/1444406/how-to-delete-duplicate-lines-in-a-file-without-sorting-it-in-unix

#+begin_note
If you can ~sort~ the file, using ~uniq~ is a much, much quicker solution...
#+end_note

How to *retrieve* the *first occurrence* of records for some fields only?

: awk '!seen[$2]++' INFILE

** Sort file according to the Nth column

Use multiple ~-k~ flags to sort by first, then second column as a tie breaker:

: sort -k 2,2 -k 1,1 INFILE

*Use ~sort -u~ to remove duplicate data.*

** Remove lines shorter than N

Display long lines.

: awk 'length($0) >= N' INFILE

If you want to display lines of exactly N characters, use ~==~ as comparison operator.

** Sort by length

: awk '{ print length, $0 }' INFILE | sort -n -s | cut -d" " -f2- > OUTFILE

Source: https://stackoverflow.com/questions/5917576/sort-a-text-file-by-line-length-including-spaces/

** Find all of the distinct file extensions in a folder hierarchy

Find executable file extensions:

: find . -executable -type f | awk -F'.' '{print $NF;}'

Recursive version:

#+begin_src shell
alias file_ext=$'find . -type f -name "*.*" | awk -F. \'!a[$NF]++{print $NF}\''
#+end_src

Recursive version:

#+begin_src shell
find . -type f | sed -e 's/.*\.//' | sed -e 's/.*\///' | sort -u
#+end_src

If you want totals (how may times the extension was seen):

#+begin_src shell
find . -type f | sed -e 's/.*\.//' | sed -e 's/.*\///' | sort | uniq -c | sort -rn
#+end_src

Non-recursive (single folder):

#+begin_src shell
for f in *.*; do printf "%s\n" "${f##*.}"; done | sort -u
#+end_src

* Shell functions
:PROPERTIES:
:header-args+: :tangle bin/shellutils :shebang #!/usr/bin/env bash
:END:

Only use alphanumeric characters and the underscore for function names.

** Check for Cygwin executable files

We sometimes have to check that the ~PATH~ is set right, so that Cygwin
executables (for example, ~whoami~ and ~hostname~) are found before their Windows
counterpart -- to avoid problems of spurious ~\r~ added to the output.

** Find files

#+begin_src shell :tangle no
find . -type f -iname "*$1*" -printf '%P\n'
#+end_src

Alternatively, if piping commands, avoid *buffered output* by applying ~stdbuf -oL~
to ~find~ (force flushing of output).

: stdbuf -oL find . -type f -iname "*$1*" -print | sed "s#\./##"

The buffering is on the output side of the pipe, not the input side.

** Find recent files

In Everything (from Voidtools), we would use a syntax like:

: rc:today ext:jar filename

Search syntax:
http://www.voidtools.com/forum/viewtopic.php?p=6200#p6200

#+begin_src shell
# List all files modified YESTERDAY.
yesterday() {
    find . -daystart -mtime 1 -type f -printf "%CY-%Cm-%Cd %Ca %CH:%CM - %P\n"
}
#+end_src

XXX Check out %C, %T and %A!!!

XXX Checkout mtime 1 or -1, 7 or -7

See https://unix.stackexchange.com/questions/26313/colored-find-output for
*colored find output*.

** Find recent files
:PROPERTIES:
:header-args+: :shebang #!/usr/bin/env bash
:END:

It recursively finds all files containing the pattern of the first argument
passed to the command (~fr <pattern>~) and sorts them with the most recent one
last.

Options (to ~es~, Everything):
-r Search the database using a basic POSIX regular expression.
-i Does a case sensitive search.
-w Does a whole word search.
-p Does a full path search.
-h --help Display this help.
-n <num> Limit the amount of results shown to <num>.
-s Sort by full path.

~dm~ will show files and folders that have been altered in content today (their
"date modified" field has been changed).

XXX Includes copies?

#+begin_src shell :tangle bin/rc
# Recent Change.
find . -iname "*"$@"*" -printf "%C@ %CY-%Cm-%Cd %Ca %CH:%CM - %P\n" \
    | sort -n \
    | cut -d " " -f 2- \ \
    | grep -i "$@";
#+end_src

~rc~ includes moves and renames that do not change the "date modified" field or
the contents of the files or folders.

XXX See
https://superuser.com/questions/294161/unix-linux-find-and-sort-by-date-modified
for improvements (using ~ssed~ and ~cut~ with complement option).

* Shell scripts
:PROPERTIES:
:header-args+: :shebang #!/usr/bin/env bash
:END:

** Send an email
:PROPERTIES:
:header-args+: :tangle bin/mail :shebang #!/usr/bin/env bash
:END:

Send a mail to one or more people.

*** Name

#+begin_src shell :noweb yes :padline no
# mail -- Send simple mail
#+end_src

*** Synopsis

#+begin_src shell
Usage()
{
    cat << EOF 1>&2
Usage: $SCRIPT_NAME [-s SUBJECT] [-a ATTACHMENT]... [-c CC-ADDR] [-b BCC-ADDR] [-f FROM-ADDR] TO-ADDR
Try '$SCRIPT_NAME -h' for more information.
EOF
    exit 2
}
#+end_src

*** Description

Send an email using ~mail~:

#+begin_src shell :tangle no
mail -s "Subject" recipient@example.com < /path/to/file
cat /path/to/file | mail -s "Subject" recipient@example.com
echo "Message" | mail -s "Subject" recipient@example.com
#+end_src

*** Options

The following options shall be supported:

#+begin_src shell :noweb yes
Help()
{
    cat << EOF
This is $SCRIPT_NAME, version: <<current-time()>>.

Usage: $SCRIPT_NAME [-s SUBJECT] [-a ATTACHMENT]... [-c CC-ADDR] [-b BCC-ADDR] [-f FROM-ADDR] TO-ADDR
Send simple mail.
Examples:
    $SCRIPT_NAME -s 'Disk failure' bill@example.com < /tmp/message
    print "This is the body." | $SCRIPT_NAME -s 'Other subject' bill@example.com

Options:
  -s  Specify subject on command line
  -a  Attach a file
  -c  Send carbon copies to (comma separated) list of recipients
  -b  Send blind carbon copies to (comma separated) list of recipients
  -f  Set the From address
  -h  Display this help and exit
EOF
    exit 0
}
#+end_src

*** Stdin

When ~mail~ is invoked, standard input shall be the message to be delivered to
the specified addresses.

*** Input files

None.

*** Environment variables

The behavior of ~mail~ is affected by the following environment variable:

- ~SMTP~ ::
     The SMTP connection is made to the server specified by the variable ~SMTP~.

*** Stdout

The standard output shall be that of the ~blat~ command.

*** Stderr

The standard error shall be used only for diagnostic messages.

*** Output files

None.

*** Exit status

The ~mail~ utility returns one of the following values upon exit:

- 0 ::
     Successful completion: one mail was sent.

- 2 ::
     Invalid options were specified on the command line or shell input was
     missing.

Otherwise, the exit status of ~mail~ shall be that of the ~blat~ command.

*** Examples

Here's a shell script that reports the disk usage:

#+begin_src shell :tangle no
( printf "Disk usage:\n" ; du -sh ) | mail -s "Disk usage report" recipient@example.com
#+end_src

Here's another one to backup a configuration folder, archive it, and send it as
an attachment:

#+begin_src shell :tangle no
tar -zcf ~/backup.tar.gz ~/files_to_backup
printf "Archived configuration files\n" | mail -s "Backup data" -a ~/backup.tar.gz recipient@example.com
#+end_src

*** Code

#+begin_src shell
# command name
SCRIPT_NAME=$(basename "$0")

. shellutils || exit 2

if [ $# -eq 0 ]; then
    Usage
fi

# check for Cygwin executable files (and not their Windows counterpart)
has-cygwin "whoami" "hostname"

# default values
SUBJECT="none"
ATTFILES=""                             # files to be attached
CC=""
BCC=""
FROM="<$(whoami)@$(echo "$(hostname)".com | tr '[:upper:]' '[:lower:]')>"
: "${SMTP:=smtp}"                     # set var if not already set

while getopts "s:c:b:f:a:h" opt
do
    case "$opt" in
        s) SUBJECT="$OPTARG";;
        a) ATTFILES="$ATTFILES $OPTARG";;
        c) CC="$OPTARG";;
        b) BCC="$OPTARG";;
        f) FROM="$OPTARG";;
        h) Help;;
        ,*) Usage;;
    esac
done
shift $((OPTIND - 1))

MAILTO="$1"
if [ "$MAILTO" = "" ]; then
    Usage
fi

# check presence of stdin contents
[ -t 0 ] && die "Message body is missing."

# check presence of blat command
has "blat"

ATT_SWITCH=""
for attach in $ATTFILES
do
    if [ ! -r "$attach" ]
    then
        die "File $attach does not exist or is not readable."
    else
        # binary vs text file
        if [ "$(file --brief --mime "$attach" 2> /dev/null | cut -d/ -f 1)" = "text" ]
        then
            ATT_SWITCH="$ATT_SWITCH -attacht $(cygpath -w "$attach")"
        else
            ATT_SWITCH="$ATT_SWITCH -attach $(cygpath -w "$attach")"
        fi
    fi
done

CC_SWITCH=""
[ "$CC" = "" ] || CC_SWITCH="-cc ${CC}"

BCC_SWITCH=""
[ "$BCC" = "" ] || BCC_SWITCH="-bcc ${BCC}"

blat -to "$MAILTO" \
     "$CC_SWITCH" \
     "$BCC_SWITCH" \
     -subject "$SUBJECT" \
     -f "$FROM" \
     -server "$SMTP" \
     "$ATT_SWITCH"

# mail ends here
#+end_src

** Utils

#+begin_src shell :tangle bin/strip-dashes
# Strip lines with dashes.
sed "s/NULL//g"
#+end_src

#+begin_src shell :tangle bin/replace-null
# Replace NULL value by empty string.
sed "s/NULL//g"
#+end_src

** Find-up
:PROPERTIES:
:header-args+: :tangle bin/find-up :shebang #!/usr/bin/env bash
:END:

Search for the specified file(s) in the directory tree upwards, up to ~/~.

Usage:
: find-up -name 'x*'

#+begin_src shell
set -e
while [[ $PWD != / ]]; do
    find "$PWD"/ -maxdepth 1 -mindepth 1 "$@"
    cd ..
done
#+end_src

* Compare two files and print unmatched lines / Deleting lines from one file which are in another file

Remove the lines from file which appear in another file.

** Comm

Compare two *sorted* files line by line.

- ~-1~ removes all lines unique to ~file1~,
- ~-2~ removes all lines that are only in ~file2~ and
- ~-3~ removes all lines that are *common* in both files.

The ~comm~ (with ~sort~) method take a long time on large files.

#+begin_src shell
# Print lines in file1 not in file2, and vice versa.
comm -3 <(sort file1) <(sort file2)
#+end_src

#+begin_src shell
# Print unmatched lines.
$ comm -13 <(sort file1) <(sort file2)
# Suppress the lines that are in both files, or only in file1.
#+end_src

*Remove the lines from file ~from-this.txt~ *which appear in file ~exclude-these.txt~.*
No cleanup needed!

#+begin_src shell
# Clear redundant contents in from-this.txt.
comm -23 from-this.txt exclude-these.txt | sponge from-this.txt
#+end_src

** AWK

Alternatively, an AWK solution to remove common lines between 2 files without
sorting -- *much faster* than ~sort~, and keeps the original order of the
=from-this.txt= file:

#+begin_src shell
awk 'NR == FNR { a[$0]++; next } { if (! a[$0]) print }' exclude-these.txt from-this.txt
#+end_src

#+begin_note
In Awk, ~FNR~ refers to the record number (typically the line number) in the
current file and ~NR~ refers to the total record number.  This means that the
condition ~NR==FNR~ is only true for the first file, as ~FNR~ resets back to 1 for
the first line of each file but ~NR~ keeps on increasing.

This pattern is typically used to perform actions on only the first file.  The
next inside the block means any further commands are skipped, so they are only
run on files other than the first.
#+end_note

If you're doing this with huge files, then the *memory constraints* of loading
a huge file into an associative array are going to be prohibitive.

** Diff

The downside of the above solutions is that it doesn't take line order into
account and, if your input has duplicate lines in different places, you might
not get what you expect.

The solution to that is to use a real comparison tool such as ~diff~.  You could
do this by creating a diff file with the context value at 100% of the lines in
the file, then parsing it for just the lines that would be removed if converting
file =from-this.txt= to file =exclude-these.txt=.  /(This command also removes the
diff formatting after it gets the right lines.)/

#+begin_src shell
colordiff -U $(wc -l < from-this.txt) from-this.txt exclude-these.txt | sed -n 's/^-//p'
#+end_src

Example:

#+begin_src shell
awk 'NR == FNR { a[$0]++; next } { if (! a[$0]) print }' dupes-standard.txt dupes-custo.txt
colordiff -U $(wc -l < dupes-custo.txt) dupes-custo.txt dupes-standard.txt | sed -n 's/^-//p'
#+end_src

* Recursively run chmod -x?

** Convert the files with 755 permissions to 644

#+begin_src sh :tangle no
find . -type f -perm 755 -exec chmod 644 {} \;
#+end_src

#+begin_note
You could use ~+~ instead of ~\;~ to reduce the number of subprocesses created.
#+end_note

** Pictures, etc.

Scan for all files that do have the "executable" bit set:

: find . -executable -type f | awk -F'.' '{print $NF;}' | sort | uniq -c

There is no (good) reason ever for pictures to be executable.

Just run ~revoke-exec-perms~ to fix the permissions:

: revoke-exec-perms

See also https://www.lifewire.com/list-of-executable-file-extensions-2626061

Bonus:

#+begin_src shell :tangle no
find /space/music -type d -exec chmod o-w {} +
find /space/music -type d -exec chmod 755 {} +
#+end_src

Explanation:

Most of the command line is self-explanatory. The only part that need some
insight is the ending. ~{}~ is replaced by the name of the files (resp directory)
found that match the filter. Usually, the find command is ended with a protected
semicolon ~\;~.

However, this isn't efficient as the command is run once for each
file/directory.

There is a well known workaround that pipes ~find~ output to ~xargs~ which
concatenates the file names up to the maximum command line allowed but then
there is an issue when the path contains spaces, which is more and more common
even in the Unix/Linux world.

Again a workaround based on GNU specific extensions allows to properly handle
these case. I choose a simpler approach using a POSIX (read portable) way to
have find building itself the long command lines, i.e. ~{}~ is replaced by a suite
of file names up to the maximum number allowed.

