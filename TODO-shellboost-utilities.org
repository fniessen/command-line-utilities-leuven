# Hey Emacs, this is a -*- org -*- file ...
#+TITLE:     Enhancements TODOs

* Tasks

** TODO Avoid node_modules?

: find . \( -path './.git' -o -path './node_modules' \) -prune -o -type f -print0)

** TODO Use this color initialization for shell scripts

#+begin_src shell
# Disable ANSI color codes if output is not a terminal.
if [[ ! -t 1 ]]; then
    USE_COLOR=false
else
    USE_COLOR=true
fi

# Define color and formatting variables using ANSI escape codes if supported.
if [[ "$USE_COLOR" == true ]]; then
    RESET=$'\e[0m'
    BOLD=$'\e[1m'
    RED=$'\e[31m'
    GREEN=$'\e[32m'
    YELLOW=$'\e[33m'
    BLUE=$'\e[34m'
    MAGENTA=$'\e[35m'
    CYAN=$'\e[36m'
    WHITE=$'\e[37m'
    BGRED=$'\e[41m'
    ERROR="${BOLD}${WHITE}${BGRED}"
    WARN="${YELLOW}"
else
    RESET=''
    BOLD=''
    RED=''
    GREEN=''
    YELLOW=''
    BLUE=''
    MAGENTA=''
    CYAN=''
    WHITE=''
    BGRED=''
    ERROR=''
    WARN=''
fi
#+end_src

...is a portable and pragmatic choice, especially for scripts intended to be
copied, shared, or run in diverse environments.

Unless you're explicitly targeting old non-ANSI terminals or need termcap
safety, you're better off sticking with the ~$'\e'~ style.

** TODO Utilitaire "files-with-spaces" (+ proposition de fix)

** TODO Utilitaire "files-with-accents" (+ proposition de fix)

** TODO Use '[[' over '[' in Bash scripts (use Bashisms)
SCHEDULED: <2025-04-01 Tue>

Advantages of '[[':
- Improved functionality: You can use logical operators like '&&' and '||'
  directly within the test
- Better handling of strings: does not require escaping and quoting
- No word-splitting or filename expansion

** TODO Use 'printf' instead of 'echo -e'
SCHEDULED: <2025-04-01 Tue>

** TODO Use custom exit codes

- ~64~ - Generic script error (can be used for unexpected failures).
- ~65~ - Invalid input error (e.g., missing parameters, invalid arguments, missing
  dependencies -- e.g., docopts).
- ~66~ - File not found error (e.g., trying to access a file that doesn't exist).
- ~67~ - Command-line arguments error (e.g., improper usage of flags or options).

** TODO "This may take some time... done."

** TODO Follow Bash style guides

** TODO Filter the output of 'find-big-files' by file extension

When stdin is not empty, the scripts should use it as a filter, so that we could
pipe multiple scripts (use xargs) to find big files of a certain extension
(.txt) for example, by writing something like this:

: find-files-by-extension.sh txt | xargs -n 1 ./find-big-files

** TODO Investigate Zsh prompt error (offset issue)

Pour reproduire, générer une erreur

f.niessen@XIPHIAS:/cygdrive/d
$ d:/Users/fni/bin/argenta.R
Error: unexpected '<' in "!<"
Execution halted

puis faire une complétion (sur base du d, par exemple)

? 1 f.niessen@XIPHIAS:/cygdrive/d
$ d

*** Autre méthode

1. Générer une erreur
2. Rappeler la commande précédente (avec flèche up) -> il y a un décalage...

** TODO Add other utility scripts or aliases

See https://gitlab.com/bertrand-benoit/scripts-common for interesting ones.

** MAYB Add Docker aliases for common workflows

See docker in https://project-awesome.org/unixorn/awesome-zsh-plugins

** MAYB Experiment with Shellder as an alternative prompt

https://github.com/simnalamburt/shellder

** MAYB Evaluate alternatives to 'cat' for specific use cases

https://github.com/sharkdp/bat

(See Using bat on Cygwin)

*** Using Bat Via Docker

There is a Docker image that you can use to run bat in a container:

: docker pull danlynn/bat
: alias bat='docker run -it --rm -e BAT_THEME -e BAT_STYLE -e BAT_TABS -v "$(pwd):/myapp" danlynn/bat'

** MAYB Replace 'echo' by 'printf' for better output handling

https://unix.stackexchange.com/questions/65803/why-is-printf-better-than-echo

https://unix.stackexchange.com/questions/356686/whats-the-safest-most-portable-way-to-invoke-the-echo-binary

** MAYB Explore enhancements for Bash and other shells

https://stackoverflow.blog/2020/02/12/when-laziness-is-efficient-make-the-most-of-your-command-line/?cb=1
http://www.marinamele.com/2014/05/customize-colors-of-your-terminal-in-mac-os-x.html
https://github.com/jondot/awesome-devenv
https://github.com/mrzool/bash-sensible
