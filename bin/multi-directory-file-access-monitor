#!/usr/bin/env bash

#? Time-stamp: <2025-01-05 Sun 12:27>
#? Copyright (C) 2023-2024 Fabrice Niessen. All rights reserved.
#?
#? License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
#? This is free software: you are free to change and redistribute it.
#? There is NO WARRANTY, to the extent permitted by law.

##? Usage: multi-directory-file-access-monitor [options] [DIRECTORY]
##?
##? Monitor file access events in a specified directory and its subdirectories,
##? logging them to a file.
##?
##? Arguments:
##?   DIRECTORY                     directory to start monitoring
##?
##? Options:
##?   -h, --help                    display this help and exit
##?   -V, --version                 display version information and exit

# Set -uo pipefail for undefined variable check and pipeline failure propagation.
set -uo pipefail

# Check if 'docopts' command is available.
if ! command -v docopts > /dev/null 2>&1; then
    printf >&2 "Error: 'docopts' command not found.\n"
    exit 2
fi

# Extract help and version information from the script.
help=$(grep "^##?" "$0" | cut -c 5-)
version=$(grep "^#?" "$0" | cut -c 4-)

# Parse command-line arguments using docopts.
args="$(docopts -h "$help" -V "$version" : "$@")"
eval "$args"

# Set -e to exit on non-zero command status.
set -e

# Check if 'inotifywait' command is available.
if ! command -v inotifywait > /dev/null 2>&1; then
    printf >&2 "Error: 'inotifywait' command not found. Please install inotify-tools.\n"
    exit 2
fi

# If DIRECTORY is an empty string, set it to the current directory (.).
readonly DIRECTORY="${DIRECTORY:-./}"

# Check if the root directory exists.
if [[ ! -d "$DIRECTORY" ]]; then
    printf >&2 'Error: The specified root directory does not exist.\n'
    exit 2
fi

# Disable -e for the find command.
set +e

# Use find to locate all READABLE directories, hiding "permission denied" errors.
directories=($(find "$DIRECTORY" -type d -readable -not -name '*.git*' 2>/dev/null))

# Re-enable -e.
set -e

# Check if there are subdirectories to monitor.
num_directories_found=${#directories[@]}
if [[ $num_directories_found -eq 1 ]]; then
    # Display the warning if there are no subdirectories.
    printf >&2 'Warning: No subdirectories found to monitor under the root directory.\n'
elif [[ $num_directories_found -gt 32768 ]]; then
    # Exit if the number of directories exceeds the limit.
    printf >&2 'Error: Number of directories exceeds the limit. Exiting.\n'
    exit 2
fi

# Create a log file for file accesses in the parent of the current directory.
parent_directory=$(dirname "$(realpath "$DIRECTORY")")
log_file="$parent_directory/file_access_log_$(date +"%Y-%m-%d_%H:%M:%S").txt"

# Remove the log file if it already exists.
if [[ -e "$log_file" ]]; then
    rm "$log_file"
fi

# Determine the maximum number of instances.
max_user_instances=$((num_directories_found > 128 ? num_directories_found : 128))

current_value=$(sudo cat /proc/sys/fs/inotify/max_user_instances)
printf "Current value of max_user_instances: %s\n" "$current_value"

# Increase max_user_instances only if necessary.
if [[ $max_user_instances -gt $current_value ]]; then
    sudo sh -c "echo $max_user_instances > /proc/sys/fs/inotify/max_user_instances"
fi

# Trap the interrupt signal (Ctrl+C).
trap 'cleanup' INT

cleanup() {
    # Terminate all inotifywait processes.
    pkill inotifywait

    # Restore the original value only if necessary.
    if [[ $max_user_instances -gt $current_value ]]; then
        sudo sh -c "echo $current_value > /proc/sys/fs/inotify/max_user_instances"
    fi

    printf "\nMonitoring stopped. Exiting...\n"
    exit
}

# Loop through each directory and set up monitoring.
for directory in "${directories[@]}"; do
    # Monitor directory for file creation, modification, and access (excluding
    # certain events), and append to the log file.
    inotifywait -m -r --exclude '/\.git/' -e create -e modify -e access --format '%e %w%f' "$directory" \
        | while read -r line; do
              # Exclude events with ACCESS and ISDIR.
              if [[ "$line" != *"ACCESS,ISDIR"* ]]; then
                  printf "%s\n" "$line"
              fi
          done >> "$log_file" &
done

# Wait for a short time to ensure the messages from inotifywait are displayed first.
sleep 1

printf >&2 "\e[1;33mMonitoring all file accesses in $num_directories_found readable directories. Press Ctrl+C to stop monitoring...\e[0m\n"

# Wait for user input to exit the monitoring.
wait
