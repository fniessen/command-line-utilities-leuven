#!/usr/bin/env bash

#? split-log, Time-stamp: <2025-07-09 Wed 11:06>
#? Copyright (C) 2024-2025 Fabrice Niessen. All rights reserved.
#?
#? License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
#? This is free software: you are free to change and redistribute it.
#? There is NO WARRANTY, to the extent permitted by law.

##? Usage: split-log [options] FILE
##?
##? Splits a large log file into smaller files and converts it from UTF-16 to
##? UTF-8 if necessary.
##?
##? Arguments:
##?   FILE                          The log file to split
##?
##? Options:
##?   -h, --help                    display this help and exit
##?   -V, --version                 display version information and exit

# Set -uo pipefail for undefined variable check and pipeline failure propagation.
set -uo pipefail

# Check if required commands are available.
for cmd in docopts bc; do
    if ! command -v "$cmd" > /dev/null 2>&1; then
        printf >&2 "Error: '%s' command not found.\n" "$cmd"
        exit 2
    fi
done

# Extract help and version information from the script.
help=$(grep "^##?" "$0" | cut -c 5-)
version=$(grep "^#?" "$0" | cut -c 4-)

# Parse command-line arguments using docopts.
args="$(docopts -h "$help" -V "$version" : "$@")"
eval "$args"

# Set -e to exit on non-zero command status.
set -e

# Define the input log file and the desired output prefix.
BASENAME=$(basename "$FILE" .log)
OUTPREFIX="${BASENAME}_part_"
SIZE=2G

# Check if file exists and is a regular file.
if [[ ! -f "$FILE" ]]; then
    printf >&2 "ERROR: Argument must be a regular file that exists.\n"
    exit 2
fi

# Ensure the file has a '.log' extension.
if [[ "$FILE" != *.log ]]; then
    printf >&2 "ERROR: File must have a .log extension.\n"
    exit 2
fi

# Get the file size in bytes.
FILE_SIZE=$(stat -c%s "$FILE")

# Convert SIZE to bytes using bc
SIZE_BYTES=$(printf "%s\n" "$SIZE" | sed -e 's/G/*1024*1024*1024/' -e 's/M/*1024*1024/' -e 's/K/*1024/' -e 's/^ *//' -e 's/ *$//' | bc)

# Check if the file is smaller than the specified size; exit if it is.
if [[ "$FILE_SIZE" -lt "$SIZE_BYTES" ]]; then
    printf "Log file is smaller than %s; skipping split.\n" "$SIZE"
    exit 0
fi

# Detect if the file is UTF-16 encoded.
ENCODING=$(file -b --mime-encoding "$FILE")

if [[ "$ENCODING" == "utf-16le" || "$ENCODING" == "utf-16be" ]]; then
    printf "Converting %s from UTF-16 to UTF-8... " "$FILE"
    CONVERTED_FILE="${FILE%.log}_utf8.log"
    iconv -f UTF-16 -t UTF-8 "$FILE" -o "$CONVERTED_FILE"

    if [[ $? -ne 0 ]]; then
        printf >&2 "\nFailed to convert %s to UTF-8.\n" "$FILE"
        exit 2
    fi

    # Replace the original log file with the UTF-8 version.
    mv "$CONVERTED_FILE" "$FILE"
    printf "Done\n"
fi

# Remove BOM from all lines.
printf "Removing BOM characters... "
sed -i 's/^\xEF\xBB\xBF//' "$FILE"
printf "Done\n"

# Remove trailing ^M characters from all lines.
printf "Removing trailing ^M characters... "
sed -i 's/\r$//' "$FILE"
printf "Done\n"

# Start the split process in the background.
# Add `--numeric-suffixes=1` to start numbering at 01.
split -b $SIZE -d --additional-suffix=.log --numeric-suffixes=1 "$FILE" "$OUTPREFIX" &
SPLIT_PID=$!

# Disable 'set -e' temporarily to handle potential errors during command
# execution.
set +e

# Show a progress indicator.
printf "Splitting in progress:\n"
while kill -0 "$SPLIT_PID" 2> /dev/null; do
    # Count the number of split files created.
    FILE_COUNT=$(ls "${OUTPREFIX}"*.log 2> /dev/null | wc -l)
    # Display progress.
    printf "\rNumber of files created: %d" "$FILE_COUNT"
    sleep 1
done

# Re-enable 'set -e' after command execution.
set -e

# Wait for the split process to finish.
wait "$SPLIT_PID"

printf "\nLog file has been split into smaller files of approximately %s each.\n" \
       "$SIZE"

# Exit with a success code.
exit 0
