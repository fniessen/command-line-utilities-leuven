#!/usr/bin/env bash

#? remove-zone-identifier-files, Time-stamp: <2025-01-31 Fri 20:01>
#? Copyright (C) 2023-2025 Fabrice Niessen. All rights reserved.
#?
#? License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
#? This is free software: you are free to change and redistribute it.
#? There is NO WARRANTY, to the extent permitted by law.

##? Usage: remove-zone-identifier-files [options]
##?
##? Remove files ending with "Zone.Identifier" in a directory hierarchy
##?
##? Options:
##?   -h, --help                    display this help and exit
##?   -V, --version                 display version information and exit

# Set -uo pipefail for undefined variable check and pipeline failure propagation.
set -uo pipefail

# Define custom exit codes.
readonly E_GENERIC=64
readonly E_INVALID_INPUT=65
readonly E_FILE_NOT_FOUND=66
readonly E_CMDLINE_ARG=67

# Check if 'docopts' command is available.
if ! command -v docopts > /dev/null 2>&1; then
    printf >&2 "Error: 'docopts' command not found.\n"
    exit $E_INVALID_INPUT
fi

# Extract help and version information from the script.
help=$(grep "^##?" "$0" | cut -c 5-)
version=$(grep "^#?" "$0" | cut -c 4-)

# Parse command-line arguments using docopts.
args="$(docopts -h "$help" -V "$version" : "$@")"
eval "$args" || exit $E_CMDLINE_ARG

# Set -e to exit on non-zero command status.
set -e

# Set directory path (where Zone.Identifier files will be removed).
directory_path="."

# Check if the directory exists.
if [[ ! -d "$directory_path" ]]; then
    printf >&2 "Error: Directory does not exist: %s\n" "$directory_path"
    exit $E_FILE_NOT_FOUND
fi

# Find and remove files ending with "Zone.Identifier".
find "$directory_path" -type f -name "*Zone.Identifier" -delete -print 2>/dev/null

# Print completion message.
printf "Script execution complete.\n"

# Exit with a success code.
exit 0
