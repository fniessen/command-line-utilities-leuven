#!/usr/bin/env bash

#? find-recently-modified-files, Time-stamp: <2024-12-24 Tue 10:24>
#? Copyright (C) 2023-2024 Fabrice Niessen
#?
#? License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
#? This is free software: you are free to change and redistribute it.
#? There is NO WARRANTY, to the extent permitted by law.

##? Usage: find-recently-modified-files [options] [DIRECTORY]
##?
##? Find all files modified in the last 30 days (including today).
##?
##? Arguments:
##?   DIRECTORY                     starting directory
##?
##? Options:
##?   -e EXT, --extension=EXT       filter files by extension
##?   -h, --help                    display this help and exit
##?   -V, --version                 display version information and exit

# Set -uo pipefail for undefined variable check and pipeline failure propagation.
set -uo pipefail

# Check if 'docopts' command is available.
if ! command -v docopts > /dev/null 2>&1; then
    printf >&2 "Error: 'docopts' command not found.\n"
    exit 2
fi

# Extract help and version information from the script.
help=$(grep "^##?" "$0" | cut -c 5-)
version=$(grep "^#?" "$0" | cut -c 4-)

# Parse command-line arguments using docopts.
args="$(docopts -h "$help" -V "$version" : "$@")"
eval "$args"

# Set -e to exit on non-zero command status.
set -e

# Set the default directory if not provided.
readonly DIRECTORY="${DIRECTORY:-./}"

# Build the find-recent-files command with the necessary options.
find_cmd=("find-recent-files" "-e" "$extension" "30" "$DIRECTORY")

# Check if the extension variable is set.
if [[ -z "$extension" ]]; then
    # Remove the extension option if not set.
    find_cmd=("find-recent-files" "30" "$DIRECTORY")
fi

# Execute the find-recent-files command.
"${find_cmd[@]}"

# Exit with a success code.
exit 0
