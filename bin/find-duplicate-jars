#!/usr/bin/env bash

#? find-duplicate-jars, Time-stamp: <2025-03-17 Mon 13:30>
#? Copyright (C) 2020-2025 Fabrice Niessen. All rights reserved.
#?
#? License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
#? This is free software: you are free to change and redistribute it.
#? There is NO WARRANTY, to the extent permitted by law.

##? Usage: find-duplicate-jars [options] [PATTERN]
##?
##? Find and delete duplicate jar files, keeping only the most recent version.
##?
##? Options:
##?   -h, --help                    display this help and exit
##?   -V, --version                 display version information and exit

# Set -uo pipefail for undefined variable check and pipeline failure propagation.
set -uo pipefail

# Check if 'docopts' command is available.
if ! command -v docopts > /dev/null 2>&1; then
    printf >&2 "Error: 'docopts' command not found.\n"
    exit 2
fi

# Extract help and version information from the script.
help=$(grep "^##?" "$0" | cut -c 5-)
version=$(grep "^#?" "$0" | cut -c 4-)

# Parse command-line arguments using docopts.
args="$(docopts -h "$help" -V "$version" : "$@")"
eval "$args"

# Set -e to exit on non-zero command status.
set -e

# Specify the directory containing the jar files.
directory="WEB-INF/lib"
directory=${directory%/}

# Declare associative array explicitly.
declare -A jar_groups

# Collect all JAR files and group them.
while IFS= read -r -d '' jar_file; do
    base_name=$(basename "$jar_file" .jar)
    version=$(printf "%s\n" "$base_name" | sed -E 's/.*-([0-9][0-9.]*(-[A-Za-z0-9]*)*).*/\1/')
    key=$(printf "%s\n" "$base_name" | sed "s/-${version}$//")

    # Append to the group (using newline as separator).
    # Use parameter expansion with default value to handle first occurrence.
    jar_groups[$key]="${jar_groups[$key]:-}${jar_groups[$key]:+$'\n'}$jar_file"
done < <(find "$directory" -type f -name "*.jar" -print0)

# Process each group of JAR files.
for key in "${!jar_groups[@]}"; do
    # Convert the newline-separated list to an array.
    mapfile -t versions <<< "${jar_groups[$key]}"

    # Skip if no duplicates.
    [ "${#versions[@]}" -le 1 ] && continue

    # Sort versions in reverse order.
    mapfile -t sorted_versions < <(printf "%s\n" "${versions[@]}" | sort -V -r)

    # Keep the most recent version (first in sorted list).
    most_recent="${sorted_versions[0]}"

    # Get duplicates (all but the first).
    duplicates=("${sorted_versions[@]:1}")

    # Print duplicates.
    for old_version in "${duplicates[@]}"; do
        printf "Found duplicate jar file: %s\n" "$old_version"
        printf "The most recent version is: %s\n" "$most_recent"
    done
done

# Exit with a success code.
exit 0
