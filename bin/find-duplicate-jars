#!/usr/bin/env bash

#? find-duplicate-jars, Time-stamp: <2025-03-17 Mon 13:08>
#? Copyright (C) 2020-2025 Fabrice Niessen. All rights reserved.
#?
#? License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
#? This is free software: you are free to change and redistribute it.
#? There is NO WARRANTY, to the extent permitted by law.

##? Usage: find-duplicate-jars [options] [PATTERN]
##?
##? Find and delete duplicate jar files, keeping only the most recent version.
##?
##? Options:
##?   -h, --help                    display this help and exit
##?   -V, --version                 display version information and exit

# Set -uo pipefail for undefined variable check and pipeline failure propagation.
set -uo pipefail

# Check if 'docopts' command is available.
if ! command -v docopts > /dev/null 2>&1; then
    printf >&2 "Error: 'docopts' command not found.\n"
    exit 2
fi

# Extract help and version information from the script.
help=$(grep "^##?" "$0" | cut -c 5-)
version=$(grep "^#?" "$0" | cut -c 4-)

# Parse command-line arguments using docopts.
args="$(docopts -h "$help" -V "$version" : "$@")"
eval "$args"

# Set -e to exit on non-zero command status.
set -e

# Specify the directory containing the jar files.
directory="WEB-INF/lib"
directory=${directory%/}

# Find all the jar files in the directory.
find "$directory" -type f -name "*.jar" -print0 |
    while IFS= read -r -d '' jar_file; do
        base_name=$(basename "$jar_file" .jar)

        # Extract the base name and the version number from the jar file name.
        version=$(printf "%s\n" "$base_name" | sed -E 's/.*-([0-9][0-9.]*(-[A-Za-z0-9]*)*).*/\1/')
        key=$(printf "%s\n" "$base_name" | sed "s/-${version}$//")

        # Find all the jar files with the same base name.
        versions=$(find "$directory" -type f -name "$key-[0-9]*.jar")

        # Sort the jar files by version number in reverse order.
        sorted_versions=$(printf "%s\n" "$versions" | sort -V -r)

        # Keep only the most recent jar file.
        to_delete=$(printf "%s\n" "$sorted_versions" | tail -n +2)

        # Skip if no duplicates.
        [ -z "$to_delete" ] && continue

        # Show duplicates.
        while IFS= read -r old_version; do
            printf "Found duplicate jar file: %s\n" "$old_version"
            printf "The most recent version is: %s\n" "$(printf "%s\n" "$sorted_versions" | head -n 1)"
        done <<< "$to_delete"
    done

# Exit with a success code.
exit 0
