#!/usr/bin/env bash

#? bak, Time-stamp: <2024-08-13 Tue 11:11>
#? Copyright (C) 2020-2024 Fabrice Niessen
#?
#? License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
#? This is free software: you are free to change and redistribute it.
#? There is NO WARRANTY, to the extent permitted by law.

##? Usage: bak [options] FILE
##?
##? Create a quick back-up copy of a file.
##?
##? Arguments:
##?   FILE                          file to copy
##?
##? Options:
##?   -r, --rename                  rename the original file instead of making a copy
##?   -h, --help                    display this help and exit
##?   -V, --version                 display version information and exit
##?
##? Examples:
##?   bak core/main.c
##?   bak -r core/main.c

# Set -uo pipefail for undefined variable check and pipeline failure propagation.
set -uo pipefail

# ANSI color codes for bold text.
bold=$(tput bold)
normal=$(tput sgr0)

# Define function to check if a file exists and prompt the user to confirm overwrite.
confirm_overwrite() {
    local file="$1"
    if [[ -e "$file" ]]; then
        read -p "The file ${bold}$file${normal} already exists. Do you want to overwrite it? (y/N) " confirm
        if [[ "$confirm" =~ ^[yY]$ ]]; then
            return 0
        else
            printf "Operation cancelled.\n"
            return 1
        fi
    else
        return 0
    fi
}

# Check if 'docopts' command is available.
if ! command -v docopts > /dev/null 2>&1; then
    printf >&2 "Error: 'docopts' command not found.\n"
    exit 2
fi

# Extract help and version information from the script.
help=$(grep "^##?" "$0" | cut -c 5-)
version=$(grep "^#?" "$0" | cut -c 4-)

# Get command-line arguments.
args="$(docopts -h "$help" -V "$version" : "$@")"
eval "$args"

# Set -e to exit on non-zero command status.
set -e

# Define the backup file extension constant.
readonly BAK_EXTENSION="_bak"

# Extract the file extension and basename.
filename=$(basename -- "$FILE")
extension=""
if [[ ! "$filename" == *.* ]]; then
    extension=""
else
    extension=".${filename##*.}"
fi
basename="${filename%.*}"

# Define the backup file name with the path as prefix.
new_file="$(dirname -- "$FILE")/$basename$BAK_EXTENSION$extension"

# Check if the input file exists.
if [[ ! -f "$FILE" ]]; then
    printf >&2 "Error: Input file '${bold}$FILE${normal}' does not exist.\n"
    exit 2
fi

# Copy or rename the file depending on the options used.
if [[ "$rename" == "true" ]]; then
    if confirm_overwrite "$new_file"; then
        mv "$FILE" "$new_file"
        printf "File renamed from ${bold}$FILE${normal} to ${bold}$new_file${normal}.\n"
    fi
else
    if confirm_overwrite "$new_file"; then
        cp "$FILE" "$new_file"
        printf "File copied from ${bold}$FILE${normal} to ${bold}$new_file${normal}.\n"
    fi
fi

# Exit with a success code.
exit 0
