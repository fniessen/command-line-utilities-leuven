#!/usr/bin/env bash

#? bak, Time-stamp: <2023-04-06 Thu 11:42>
#? Copyright (C) 2020-2023 Fabrice Niessen
#?
#? License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
#? This is free software: you are free to change and redistribute it.
#? There is NO WARRANTY, to the extent permitted by law.

##? Usage: bak [options] FILE
##?
##? Create a quick back-up copy of a file.
##?
##? Arguments:
##?   FILE                          file to copy
##?
##? Options:
##?   -r, --rename                  rename the original file instead of making a copy
##?   -h, --help                    display this help and exit
##?   -V, --version                 display version information and exit
##?
##? Examples:
##?   bak core/main.c
##?   bak -r core/main.c

set -e

# Check if a file exists and prompt the user to confirm overwrite.
function confirm_overwrite() {
    local file="$1"
    if [ -e "$file" ]; then
        printf "The file %s already exists. Do you want to overwrite it? (y/N) " "$file"
        read -r confirm
        if [[ "$confirm" =~ ^[yY]$ ]]; then
            return 0
        else
            printf "Operation cancelled.\n"
            return 1
        fi
    else
        return 0
    fi
}

# Check if docopts command is available.
command -v docopts > /dev/null 2>&1 || { printf >&2 'Error: docopts command not found.\n'; exit 2; }

help=$(grep "^##?" "$0" | cut -c 5-)
version=$(grep "^#?"  "$0" | cut -c 4-)
parsed="$(docopts -h "$help" -V "$version" : "$@")"
eval "$parsed"

# Extract the file extension and basename.
BASENAME=$(basename -- "$FILE")
EXTENSION="${BASENAME##*.}"
BASENAME="${BASENAME%.*}"

# Define the backup file name.
NEWFILE="$BASENAME.bak.$EXTENSION"

if [[ "$rename" == "true" ]]; then
    # If the rename option is provided, rename the file instead of copying it.
    if confirm_overwrite "$NEWFILE"; then
        mv "$FILE" "$NEWFILE" \
            && printf "File renamed from %s to %s.\n" "$FILE" "$NEWFILE"
    fi
else
    # Copy the file.
    if confirm_overwrite "$NEWFILE"; then
        cp "$FILE" "$NEWFILE" \
            && printf "File copied from %s to %s.\n" "$FILE" "$NEWFILE"
    fi
fi
