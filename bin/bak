#!/usr/bin/env bash

#? bak, Time-stamp: <2025-06-20 Fri 10:17>
#? Copyright (C) 2020-2025 Fabrice Niessen. All rights reserved.
#?
#? License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
#? This is free software: you are free to change and redistribute it.
#? There is NO WARRANTY, to the extent permitted by law.

##? Usage: bak [options] FILE
##?
##? Create a quick back-up copy of a file.
##?
##? Arguments:
##?   FILE                          file to copy
##?
##? Options:
##?   -r, --rename                  rename the original file instead of making a copy
##?   -h, --help                    display this help and exit
##?   -V, --version                 display version information and exit
##?
##? Examples:
##?   bak core/main.c
##?   bak -r core/main.c

# BSD sysexits.h exit codes.
EX_OK=0
EX_NOINPUT=66
EX_UNAVAILABLE=69
EX_OSERR=71

# Set -uo pipefail for undefined variable check and pipeline failure propagation.
set -uo pipefail

# Define tput formatting variables for reuse.
BOLD=$(tput bold)
GREEN=$(tput setaf 2)
RED=$(tput setaf 1)
RESET=$(tput sgr0)

# Check if 'colordiff' is installed, and use it for colorized output, fallback
# to 'diff'.
diff_cmd="diff"
if command -v colordiff > /dev/null 2>&1; then
    diff_cmd="colordiff"
fi

# Define function to check if a file exists, compare it, show differences if necessary,
# and prompt the user for overwrite.
confirm_overwrite_or_skip() {
    local source_file="$1"
    local backup_file="$2"

    if [[ -e "$backup_file" ]]; then
        if cmp -s "$source_file" "$backup_file"; then
            printf "Backup ${BOLD}$backup_file${RESET} already exists and is identical. No update needed.\n"
            return 1
        else
            printf "\nDifferences between ${GREEN}${BOLD}$source_file${RESET} and ${RED}${BOLD}$backup_file${RESET}:\n\n"
            $diff_cmd -u "$backup_file" "$source_file"
            printf "\n"
            read -p "The file ${RED}${BOLD}$backup_file${RESET} already exists but differs. Overwrite it? (y/N) " confirm
            if [[ "$confirm" =~ ^[yY]$ ]]; then
                return 0
            else
                printf "Operation cancelled.\n"
                return 1
            fi
        fi
    fi
    return 0
}

# Check if 'docopts' command is available.
if ! command -v docopts > /dev/null 2>&1; then
    printf >&2 "Error: 'docopts' command not found.\n"
    exit $EX_UNAVAILABLE
fi

# Extract help and version information from the script.
help=$(grep "^##?" "$0" | cut -c 5-)
version=$(grep "^#?" "$0" | cut -c 4-)

# Parse command-line arguments using docopts.
args="$(docopts -h "$help" -V "$version" : "$@")"
eval "$args"

# Set -e to exit on non-zero command status.
set -e

# Define the backup file extension constant.
readonly BAK_EXTENSION="_bak"

# Extract the file extension and basename.
filename=$(basename -- "$FILE")
extension=""
if [[ ! "$filename" == *.* ]]; then
    extension=""
else
    extension=".${filename##*.}"
fi
basename="${filename%.*}"

# Define the backup file name with the path as prefix.
new_file="$(dirname -- "$FILE")/$basename$BAK_EXTENSION$extension"

# Check if the input file exists.
if [[ ! -f "$FILE" ]]; then
    printf >&2 "Error: Input file '${BOLD}$FILE${RESET}' does not exist.\n"
    exit $EX_NOINPUT
fi

# Copy or rename the file depending on the options used.
if [[ "$rename" == "true" ]]; then
    if confirm_overwrite_or_skip "$FILE" "$new_file"; then
        mv "$FILE" "$new_file" || exit $EX_OSERR
        printf "File renamed from ${BOLD}$FILE${RESET} to ${BOLD}$new_file${RESET}.\n"
    fi
else
    if confirm_overwrite_or_skip "$FILE" "$new_file"; then
        cp "$FILE" "$new_file" || exit $EX_OSERR
        printf "File copied from ${GREEN}${BOLD}$FILE${RESET} to ${RED}${BOLD}$new_file${RESET}.\n"
    fi
fi

# Exit with a success code.
exit $EX_OK
