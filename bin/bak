#!/usr/bin/env bash

#? bak, Time-stamp: <2023-07-31 Mon 10:42>
#? Copyright (C) 2020-2023 Fabrice Niessen
#?
#? License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
#? This is free software: you are free to change and redistribute it.
#? There is NO WARRANTY, to the extent permitted by law.

##? Usage: bak [options] FILE
##?
##? Create a quick back-up copy of a file.
##?
##? Arguments:
##?   FILE                          file to copy
##?
##? Options:
##?   -r, --rename                  rename the original file instead of making a copy
##?   -h, --help                    display this help and exit
##?   -V, --version                 display version information and exit
##?
##? Examples:
##?   bak core/main.c
##?   bak -r core/main.c

set -euo pipefail

# Define function to check if a file exists and prompt the user to confirm overwrite.
confirm_overwrite() {
    local file="$1"
    if [[ -e "$file" ]]; then
        read -p "The file $file already exists. Do you want to overwrite it? (y/N) " confirm
        if [[ "$confirm" =~ ^[yY]$ ]]; then
            return 0
        else
            echo "Operation cancelled."
            return 1
        fi
    else
        return 0
    fi
}

# Check if docopts command is available.
if ! command -v docopts > /dev/null 2>&1; then
    printf >&2 'Error: docopts command not found.\n'
    exit 2
fi

# Extract help and version information from the script.
help=$(grep "^##?" "$0" | cut -c 5-)
version=$(grep "^#?" "$0" | cut -c 4-)

# Get command-line arguments.
args="$(docopts -h "$help" -V "$version" : "$@")"
eval "$args"

# Extract the file extension and basename.
filename=$(basename -- "$FILE")
extension=""
if [[ ! "$filename" == *.* ]]; then
    extension=""
else
    extension=".${filename##*.}"
fi
basename="${filename%.*}"

# Define the backup file name with the path as prefix.
new_file="$(dirname -- "$FILE")/$basename-bak$extension"

# Check if the input file exists.
if [[ ! -f "$FILE" ]]; then
    printf >&2 "ERROR: Input file '%s' does not exist.\n" "$FILE"
    exit 2
fi

# Copy or rename the file depending on the options used.
if [[ "$rename" == "true" ]]; then
    if confirm_overwrite "$new_file"; then
        mv "$FILE" "$new_file"
        echo "File renamed from $FILE to $new_file."
    fi
else
    if confirm_overwrite "$new_file"; then
        cp "$FILE" "$new_file"
        echo "File copied from $FILE to $new_file."
    fi
fi

# Exit with a success code.
exit 0
