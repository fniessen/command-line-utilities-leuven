#!/usr/bin/env bash

#? remove-matching-lines-between-files, Time-stamp: <2024-08-13 Tue 11:28>
#? Copyright (C) 2020-2024 Fabrice Niessen
#?
#? License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
#? This is free software: you are free to change and redistribute it.
#? There is NO WARRANTY, to the extent permitted by law.

##? Usage: remove-matching-lines-between-files [options] FILE_A FILE_B
##?
##? Remove lines from FILE_A that match any lines in FILE_B.
##?
##? Arguments:
##?   FILE_A                        file from which lines will be removed
##?   FILE_B                        file containing the lines to match for removal
##?
##? Options:
##?   -h, --help                    display this help and exit
##?   -V, --version                 display version information and exit

# Set -uo pipefail for undefined variable check and pipeline failure propagation.
set -uo pipefail

# Check if 'docopts' command is available.
if ! command -v docopts > /dev/null 2>&1; then
    printf >&2 "Error: 'docopts' command not found.\n"
    exit 2
fi

# Extract help and version information from the script.
help=$(grep "^##?" "$0" | cut -c 5-)
version=$(grep "^#?" "$0" | cut -c 4-)

# Get command-line arguments.
args="$(docopts -h "$help" -V "$version" : "$@")"
eval "$args"

# Set -e to exit on non-zero command status.
set -e

# Check that both files exist.
if [[ ! -f "$FILE_A" ]]; then
    printf >&2 "Error: '%s' does not exist\n" "$FILE_A"
    exit 2
fi

if [[ ! -f "$FILE_B" ]]; then
    printf >&2 "Error: '%s' does not exist\n" "$FILE_B"
    exit 2
fi

# Read and sort FILE_B.
patterns=$(sort "$FILE_B")

# Remove matching lines from FILE_A.
filtered=$(grep -v -F -f <(printf "%s\n" "$patterns") "$FILE_A")

# Overwrite FILE_A with filtered contents.
printf '%s' "$filtered" > "$FILE_A"

# Exit with a success code.
exit 0
