#!/usr/bin/env bash

# Usage: run-until-success COMMAND [ARGS...]
#
# Run a command repeatedly until it exits with status code 0, with a timeout of 20 seconds per attempt.

# Get the command and arguments.
COMMAND=("$@")

# Define tput formatting variables for reuse.
BOLD=$(tput bold)
RESET=$(tput sgr0)
SUCCESS_COLOR=$(tput setaf 2)
FAIL_COLOR=$(tput setaf 1)
TIMEOUT_MSG_COLOR=$(tput setaf 7)$(tput bold)$(tput setab 1)

# Check if the command exists.
if ! command -v "${COMMAND[0]}" > /dev/null 2>&1; then
    printf >&2 "Error: Command '%s' not found.\n" "${COMMAND[0]}"
    exit 2
fi

# Print the command and each argument with bold text.
printf "Command: %s%s%s " "${BOLD}" "${COMMAND[0]}" "${RESET}"
for arg in "${COMMAND[@]:1}"; do
    printf "'%s%s%s' " "${BOLD}" "$arg" "${RESET}"
done
printf "\n"

# Retry loop until the command exits with status code 0.
while true; do
    # Run the command with a 20-second timeout.
    output=$(timeout 20 "${COMMAND[@]}" 2>&1)
    exit_code=$?

    if [[ $exit_code -eq 0 ]]; then
        printf "%sCommand succeeded with exit code 0.%s\n" \
               "${SUCCESS_COLOR}" "${RESET}"
        break
    elif [[ $exit_code -eq 124 ]]; then
        # Timeout occurred.
        printf "%sCommand timed out after 20 seconds. Retrying...%s\n" \
               "${TIMEOUT_MSG_COLOR}" "${RESET}"
    else
        # Other errors.
        printf "%sCommand failed with exit code %d.%s\n" \
               "${FAIL_COLOR}" $exit_code "${RESET}"
    fi

    # Wait before retrying.
    sleep 2
done

# Print the output if there is any.
if [[ -n "$output" ]]; then
    printf "%s\n" "$output"
fi
