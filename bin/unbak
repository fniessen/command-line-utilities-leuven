#!/usr/bin/env bash

#? unbak, Time-stamp: <2025-01-05 Sun 11:57>
#? Copyright (C) 2020-2024 Fabrice Niessen. All rights reserved.
#?
#? License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
#? This is free software: you are free to change and redistribute it.
#? There is NO WARRANTY, to the extent permitted by law.

##? Usage: unbak [options] FILE
##?
##? Restore a previously backed-up file to its original state.
##?
##? Arguments:
##?   FILE                          backed-up file to restore
##?
##? Options:
##?   -h, --help                    display this help and exit
##?   -V, --version                 display version information and exit
##?
##? Examples:
##?   unbak core/main_bak.c

# Set -uo pipefail for undefined variable check and pipeline failure propagation.
set -uo pipefail

# Check if 'docopts' command is available.
if ! command -v docopts > /dev/null 2>&1; then
    printf >&2 "Error: 'docopts' command not found.\n"
    exit 2
fi

# Extract help and version information from the script.
help=$(grep "^##?" "$0" | cut -c 5-)
version=$(grep "^#?" "$0" | cut -c 4-)

# Parse command-line arguments using docopts.
args="$(docopts -h "$help" -V "$version" : "$@")"
eval "$args"

# Set -e to exit on non-zero command status.
set -e

# Define the backup file extension constant.
readonly BAK_EXTENSION="_bak"

# Function to check if the file name contains '_bak'.
file_contains_bak() {
    local filename=$(basename -- "$1")
    if [[ "$filename" == *"${BAK_EXTENSION}"* ]]; then
        return 0
    else
        return 1
    fi
}

# Define tput formatting variables for reuse.
BOLD=$(tput bold)
GREEN=$(tput setaf 2)
RED=$(tput setaf 1)
RESET=$(tput sgr0)

# Check if the backed-up file exists.
if [[ ! -f "$FILE" ]]; then
    printf >&2 "Error: Backed-up file '${BOLD}$FILE${RESET}' does not exist.\n"
    exit 2
fi

# Check if the file name contains '_bak'.
if ! file_contains_bak "$FILE"; then
    printf >&2 "Error: File '${BOLD}$FILE${RESET}' does not contain '${BOLD}$BAK_EXTENSION${RESET}' in its name.\n"
    exit 2
fi

# Extract the original file name and extension from the backed-up file name.
filename=$(basename -- "$FILE")
extension=""
if [[ "$filename" != *.* ]]; then
    original_file="$filename"
else
    extension=".${filename##*.}"
    original_file="${filename%$BAK_EXTENSION*}"
fi

# BUG: Fix original_file computation for (backed up) files without extension
if [[ -z "$extension" ]]; then
    original_file="${filename%$BAK_EXTENSION}"
fi

original_directory=$(dirname -- "$FILE")
original_file_with_extension="$original_file$extension"

# Check if the original file exists.
if [[ -f "$original_directory/$original_file_with_extension" ]]; then
    printf "The original file '${BOLD}$original_file_with_extension${RESET}' already exists.\n"

    # Disable 'set -e' temporarily to handle potential errors during command execution.
    set +e

    # Check if 'colordiff' is installed, and use it for colorized output,
    # fallback to 'diff'.
    diff_cmd="diff"
    if command -v colordiff > /dev/null 2>&1; then
        diff_cmd="colordiff"
    fi

    diff_output=$($diff_cmd "$original_directory/$original_file_with_extension" "$FILE")
    set -e

    if [[ -n "$diff_output" ]]; then
        # Print message with colored text.
        printf "Differences found between the ${BOLD}${GREEN}backed-up file${RESET} and the ${BOLD}${RED}current file${RESET}:\n\n%s\n\n" "$diff_output"
    else
        printf "No differences found between the backed-up file and the current file.\n"
    fi

    read -p "Do you want to overwrite the ${BOLD}${RED}existing file${RESET} with the ${BOLD}${GREEN}backed-up file${RESET}? (y/N) " confirm
    if [[ ! "$confirm" =~ ^[yY]$ ]]; then
        printf "Operation cancelled.\n"
        exit 0
    fi

    rm "$original_directory/$original_file_with_extension"
fi

# Restore the original file to its original path.
mv "$FILE" "$original_directory/$original_file_with_extension"
printf "File restored from ${BOLD}${GREEN}%s${RESET} to ${BOLD}${RED}%s/%s${RESET}.\n" \
       "$FILE" "$original_directory" "$original_file_with_extension"

# Exit with a success code.
exit 0
