#!/usr/bin/env bash

#? unbak, Time-stamp: <2024-02-02 Fri 14:52>
#? Copyright (C) 2020-2024 Fabrice Niessen
#?
#? License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
#? This is free software: you are free to change and redistribute it.
#? There is NO WARRANTY, to the extent permitted by law.

##? Usage: unbak [options] FILE
##?
##? Restore a previously backed-up file to its original state.
##?
##? Arguments:
##?   FILE                          backed-up file to restore
##?
##? Options:
##?   -h, --help                    display this help and exit
##?   -V, --version                 display version information and exit
##?
##? Examples:
##?   unbak core/main_bak.c

# Set -uo pipefail for undefined variable check and pipeline failure propagation.
set -uo pipefail

# Check if docopts command is available.
if ! command -v docopts > /dev/null 2>&1; then
    printf >&2 'Error: docopts command not found.\n'
    exit 2
fi

# Extract help and version information from the script.
help=$(grep "^##?" "$0" | cut -c 5-)
version=$(grep "^#?" "$0" | cut -c 4-)

# Get command-line arguments.
args="$(docopts -h "$help" -V "$version" : "$@")"
eval "$args"

# Set -e to exit on non-zero command status.
set -e

# Define the backup file extension constant.
readonly BAK_EXTENSION="_bak"

# Check if the backed-up file exists.
if [[ ! -f "$FILE" ]]; then
    printf >&2 "ERROR: Backed-up file '%s' does not exist.\n" "$FILE"
    exit 2
fi

# Extract the original file name and extension from the backed-up file name.
filename=$(basename -- "$FILE")
extension=""
if [[ "$filename" != *.* ]]; then
    original_file="$filename"
else
    extension=".${filename##*.}"
    original_file="${filename%$BAK_EXTENSION*}"
fi

# BUG: Fix original_file computation for (backed up) files without extension
if [[ -z "$extension" ]]; then
    original_file="${filename%$BAK_EXTENSION}"
fi

# Check if the original file exists.
original_file_with_extension="$original_file$extension"
if [[ -f "$original_file_with_extension" ]]; then
    read -p "The original file '$original_file_with_extension' already exists. Do you want to overwrite it? (y/N) " confirm
    if [[ "$confirm" =~ ^[yY]$ ]]; then
        rm "$original_file_with_extension"
    else
        printf "Operation cancelled.\n"
        exit 0
    fi
fi

# Restore the original file to its original path.
original_directory=$(dirname -- "$FILE")
mv "$FILE" "$original_directory/$original_file_with_extension"
printf "File restored from %s to %s/%s.\n" "$FILE" "$original_directory" "$original_file_with_extension"

# Exit with a success code.
exit 0
