#!/usr/bin/env bash

#? find-recent-files, Time-stamp: <2024-02-06 Tue 08:58>
#? Copyright (C) 2023-2024 Fabrice Niessen
#?
#? License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
#? This is free software: you are free to change and redistribute it.
#? There is NO WARRANTY, to the extent permitted by law.

##? Usage: find-recent-files [options] [DIRECTORY]
##?
##? Find all files modified in the last 7 days (including today).
##?
##? Arguments:
##?   DIRECTORY                     starting directory
##?
##? Options:
##?   -e EXT, --extension=EXT       filter files by extension
##?   -h, --help                    display this help and exit
##?   -V, --version                 display version information and exit

# Set -uo pipefail for undefined variable check and pipeline failure propagation.
set -uo pipefail

# Check if docopts command is available.
if ! command -v docopts > /dev/null 2>&1; then
    printf >&2 'Error: docopts command not found.\n'
    exit 2
fi

# Extract help and version information from the script.
help=$(grep "^##?" "$0" | cut -c 5-)
version=$(grep "^#?" "$0" | cut -c 4-)

# Get command-line arguments.
args="$(docopts -h "$help" -V "$version" : "$@")"
eval "$args"

# Set -e to exit on non-zero command status.
set -e

# Set the default directory if not provided.
readonly DIRECTORY=${DIRECTORY:-.}

# Define the format for printing file information.
readonly PRINT_FORMAT="  %CY-%Cm-%Cd %Ca %CH:%CM - %P\n"

# Check if the extension variable is set.
if [[ -n "$extension" ]]; then
    # If the extension variable is set, use it to find files with the specific
    # extension.
    find "$DIRECTORY" -type f -name "*.$extension" -daystart -mtime -7 -printf "$PRINT_FORMAT"
else
    # If the extension variable is not set, find all files without specifying an
    # extension.
    find "$DIRECTORY" -type f -daystart -mtime -7 -printf "$PRINT_FORMAT"
fi

# Exit with a success code.
exit 0
