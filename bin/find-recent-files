#!/usr/bin/env bash

#? find-recent-files, Time-stamp: <2025-08-02 Sat 12:10>
#? Copyright (C) 2023-2025 Fabrice Niessen. All rights reserved.
#?
#? License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
#? This is free software: you are free to change and redistribute it.
#? There is NO WARRANTY, to the extent permitted by law.

##? Usage: find-recent-files [options] [THRESHOLD] [DIRECTORY]
##?
##? Find all files modified in the last THRESHOLD days (including today).
##?
##? Arguments:
##?   THRESHOLD                     specify the threshold in days [default: 7].
##?   DIRECTORY                     starting directory [default: .].
##?
##? Options:
##?   -e EXT, --extension=EXT       filter files by extension
##?   -h, --help                    display this help and exit
##?   -V, --version                 display version information and exit

# Set -uo pipefail for undefined variable check and pipeline failure propagation.
set -uo pipefail

# Check if 'docopts' command is available.
if ! command -v docopts > /dev/null 2>&1; then
    printf >&2 "Error: 'docopts' command not found.\n"
    exit 2
fi

# Extract help and version information from the script.
help=$(grep -E '^##\?' "$0" | cut -c 5-)
version=$(grep -E '^#\?' "$0" | cut -c 4-)

# Parse command-line arguments using docopts.
eval "$(docopts -h "$help" -V "$version" : "$@")" || exit $?

# Set -e to exit on non-zero command status.
set -e

# Set the threshold, defaulting to 7 if not provided.
readonly THRESHOLD=${THRESHOLD:-7}

# Validate that THRESHOLD is a numeric value.
if ! [[ "$THRESHOLD" =~ ^[0-9]+$ ]]; then
    printf >&2 'Error: THRESHOLD must be a numeric value.\n'
    exit 2
fi

# Set the default directory if not provided.
readonly DIRECTORY="${DIRECTORY:-./}"

# Define the format for printing file information.
readonly PRINT_FORMAT="%CY-%Cm-%Cd %Ca %CH:%CM - %P\n"

# Check if the extension variable is set.
if [[ -n "$extension" ]]; then
    # If the extension variable is set, use it to find files with the specific
    # extension.
    find "$DIRECTORY" -type d -name .git -prune -o -type f -iname "*.$extension" -daystart -mtime -"$THRESHOLD" -printf "$PRINT_FORMAT" 2> /dev/null \
        | sort -k5
else
    # If the extension variable is not set, find all files without specifying an
    # extension.
    find "$DIRECTORY" -type d -name .git -prune -o -type f -daystart -mtime -"$THRESHOLD" -printf "$PRINT_FORMAT" 2> /dev/null \
        | sort -k5
fi

# Exit with a success code.
exit 0
