#!/usr/bin/env bash

#? find-files-with-strings, Time-stamp: <2024-07-30 Tue 11:23>
#? Copyright (C) 2023-2024 Fabrice Niessen. All rights reserved.
#?
#? License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
#? This is free software: you are free to change and redistribute it.
#? There is NO WARRANTY, to the extent permitted by law.

##? Usage: find-files-with-strings [options] STRING...
##?
##? Search for multiple strings in files.
##?
##? Arguments:
##?   STRING                        string (at least one string is required)
##?
##? Options:
##?   -i, --ignore-case             search case insensitively
##?   -d, --debug                   enable debug information
##?   -h, --help                    display this help and exit
##?   -V, --version                 display version information and exit
##?
##? Examples:
##?   find-files-with-strings "pattern1"
##?                                 search for a single pattern in files
##?   find-files-with-strings "pattern1" "pattern2"
##?                                 search for two patterns in files
##?   find-files-with-strings -d "pattern1" "pattern2"
##?                                 search with debug information
##?   find-files-with-strings -i "pattern1" "pattern2"
##?                                 search case insensitively
##?   find-files-with-strings "pattern1" "pattern2" "pattern3"
##?                                 search for multiple patterns in files

# Set -uo pipefail for undefined variable check and pipeline failure propagation.
set -uo pipefail

# Check if 'docopts' command is available.
if ! command -v docopts > /dev/null 2>&1; then
    printf >&2 "Error: 'docopts' command not found.\n"
    exit 2
fi

# Extract help and version information from the script.
help=$(grep "^##?" "$0" | cut -c 5-)
version=$(grep "^#?" "$0" | cut -c 4-)

# Get command-line arguments.
args="$(docopts -h "$help" -V "$version" : "$@")"
eval "$args"

# Set -e to exit on non-zero command status.
set -e

# Function for debugging.
debug() {
    if [[ "$debug" = true ]]; then
        printf >&2 "Debug: %s\n" "$1"
    fi
}

# Disable 'set -e' temporarily to handle potential errors during command
# execution.
set +e

# Prepare grep options.
grep_options=""
if [[ "${ignore_case}" = true ]]; then
    grep_options="-i"
fi

# Collect search strings.
search_strings=()
for var in "${STRING[@]}"; do
    if [[ -n "$var" ]]; then
        search_strings+=("$var")
    fi
done

# Ensure at least one search string is provided.
if [[ ${#search_strings[@]} -eq 0 ]]; then
    printf >&2 'Error: At least one search string is required.\n'
    exit 2
fi

# Debug output for search strings.
for i in "${!search_strings[@]}"; do
    debug "STRING$((i+1)): ${search_strings[$i]}"
done

# Construct the grep command pipeline.
find_command="find . -type f -print0 2>/dev/null"
grep_command="xargs -0 -r grep --files-with-matches --null $grep_options -- \"${search_strings[0]}\""

for i in "${search_strings[@]:1}"; do
    grep_command+=" | xargs -0 -r grep --files-with-matches --null $grep_options -- \"$i\""
done

# Combine find and grep commands.
complete_command="$find_command | $grep_command | tr '\0' '\n'"

# Debug output for the complete command.
debug "Complete command: $complete_command"

# Execute the command and capture its output.
output_command=$(eval "$complete_command")

# Re-enable 'set -e' after command execution.
set -e

# Print the output only if it's not empty.
if [[ -n "$output_command" ]]; then
    printf "%s\n" "$output_command"
fi
