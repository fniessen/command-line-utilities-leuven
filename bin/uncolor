#!/usr/bin/env bash

#? uncolor, Time-stamp: <2025-08-02 Sat 12:08>
#? Copyright (C) 2020-2025 Fabrice Niessen. All rights reserved.
#?
#? License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
#? This is free software: you are free to change and redistribute it.
#? There is NO WARRANTY, to the extent permitted by law.

##? Usage: uncolor [options] [FILE]
##?
##? Strip color sequences from the input text.
##?
##? Arguments:
##?   FILE                          file
##?
##? Options:
##?   -h, --help                    display this help and exit
##?   -V, --version                 display version information and exit

# Set -uo pipefail for undefined variable check and pipeline failure propagation.
set -uo pipefail

# Check if 'docopts' command is available.
if ! command -v docopts > /dev/null 2>&1; then
    printf >&2 "Error: 'docopts' command not found.\n"
    exit 2
fi

# Extract help and version information from the script.
help=$(grep -E '^##\?' "$0" | cut -c 5-)
version=$(grep -E '^#\?' "$0" | cut -c 4-)

# Parse command-line arguments using docopts.
eval "$(docopts -h "$help" -V "$version" : "$@")" || exit $?

# Set -e to exit on non-zero command status.
set -e

# Define the sed command as a string.
sedCommand="sed -E 's/\x1b\[([0-9]{1,3}(;[0-9]{1,3})*)?[mK]//g'"
                                        # Command to remove ANSI escape
                                        # sequences (often used to change the
                                        # color, background, or style of text in
                                        # the terminal).

# Check if the FILE variable is non-empty.
if [[ -n "$FILE" ]]; then
    eval "$sedCommand $FILE"
else
    eval "$sedCommand"
fi
