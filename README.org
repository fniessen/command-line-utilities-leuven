#+TITLE:     Optimize your workflow: Command-line utilities for efficient task automation
#+AUTHOR:    Fabrice Niessen
#+EMAIL:     (concat "fniessen" at-sign "pirilampo.org")
#+DESCRIPTION: Shell extra utilities
#+KEYWORDS:  shell, script, bash
#+OPTIONS:   num:nil

*command-line-utilities-leuven* is a collection of practical Shell scripts and
command-line tools designed to simplify and automate tasks on the command
line. From file management to system administration, these scripts cover a wide
variety of functions and can save you time and effort in your everyday
workflow. Whether you're an experienced command-line user or just getting
started, this repository has something for everyone.

* Requirements

Before using the following commands, ensure that the necessary packages are
installed on your system:

- [[https://github.com/docopt/docopts][docopts]] ("docopt for shell" â€” create beautiful command-line interfaces with ease)

  /Note:/ This script uses the "with grep" syntax to parse help and version
  messages directly from script *comments*, avoiding the need to source
  =docopts.sh=.

- [[https://github.com/fniessen/wsl][wsl]] repository (for =bin/docopts=, required in a WSL environment)

* Custom exit codes

The following *BSD-style exit codes* are used throughout the scripts:

| Code | Name           | Meaning                              | Usage                                                                                          |
|------+----------------+--------------------------------------+------------------------------------------------------------------------------------------------|
|   64 | EX_USAGE       | Command-line usage error             | Command misuse, bad input, invalid arguments                                                   |
|   65 | EX_DATAERR     | Input data error / Data format error | Bad input data (doesn't exist)                                                                 |
|   66 | EX_NOINPUT     | Cannot open input                    | Missing files                                                                                  |
|   67 | EX_NOUSER      | User unknown                         |                                                                                                |
|   68 | EX_NOHOST      | Host unknown                         |                                                                                                |
|   69 | EX_UNAVAILABLE | Service unavailable                  | A required external resource, service, or dependency (like ~docopts~) is missing / not available |
|   70 | EX_SOFTWARE    | Internal software error              | Bug or fault in the script's logic itself                                                      |
|   71 | EX_OSERR       | System error (e.g. can't fork)       | Most ~cp~ / ~mv~ failures, as they typically reflect OS-level problems; can't ~cd~                   |
|   72 | EX_OSFILE      | Critical OS file missing             |                                                                                                |
|   73 | EX_CANTCREAT   | Can't create output file             |                                                                                                |
|   74 | EX_IOERR       | I/O error                            |                                                                                                |
|   75 | EX_TEMPFAIL    | Temporary failure (retry later)      |                                                                                                |
|   76 | EX_PROTOCOL    | Remote protocol error                |                                                                                                |
|   77 | EX_NOPERM      | Permission denied                    |                                                                                                |
|   78 | EX_CONFIG      | Configuration error                  |                                                                                                |

* Commands

** bak
:PROPERTIES:
:ID:       7829854b-1ab9-4615-afa7-5647db7e08e1
:END:

Create a quick back-up copy of a file.

See also [[id:e59bc736-4850-4ca6-b284-544b80fda95e][unbak]].

** diff-directories

Compare two directories recursively and display sorted differences.

** duplicates

Print the duplicate lines from a file or standard input.

** expand-zips

Expand every .zip file into separate directories.

** f

Find directories or files matching a string and print their full file name.

** fd

Find directories matching a string and print their full file name.

** ff

Find files matching a string and print their full file name.

** find-big-files

Find big files.

** find-commands

Find commands matching a string and print their full file name.

** find-common-lines

Find common lines between two files.

** find-duplicate-jars

Find and delete duplicate jar files, keeping only the most recent version.

** find-empty-directories

Search for empty directories in a directory hierarchy

** find-empty-files

Search for empty files in a directory hierarchy

** find-executable-files

Find executable files in the current directory and its subdirectories.

** find-files-by-extension

Find files with specified extension.

** find-files-with-strings

Search for multiple strings in files.

** find-moderately-recent-files

Find all files modified in the last 30 days (including today).

** find-nonascii-filenames

Search for files with non-ASCII characters in their name

** find-recent-files

Find all files modified in the last THRESHOLD days (including today).

** find-today-files

Find all files modified today in a specified directory, filtered by extension,
and sort by full path.

** find-up

Recursively list the contents of each directory starting from the current
working directory and moving upwards towards the root directory, excluding the
root directory itself.

** find-utf8-bom-files

Find all UTF-8 encoded files that contain the BOM (ignoring binary files).

** find-yesterday-files

Find all files modified yesterday in a specified directory, filtered by
extension.

** newer

Check if FILE is newer than REF.

** remove-blank-lines

Remove blank lines from the output.

** remove-bom

Remove the UTF-8 encoded BOM if it exists (make no changes if it doesn't).

** remove-broken-symlinks

Search for broken symbolic links.

** remove-duplicate-lines

Remove duplicate entries in a file without sorting.

** remove-empty-directories

Delete all empty directories in the current directory and its subdirectories,
except for the current directory.

** remove-empty-files

Delete all empty files in the current directory and its subdirectories.

** remove-matching-lines-between-files

Remove lines from FILE_A that match any lines in FILE_B.

** remove-thumbsdb-files

Delete all Thumbs.db files from directory and its subdirectories.

** remove-unwanted-files-and-directories

Remove unwanted files and directories from the system, potentially freeing up
disk space.

** remove-zone-identifier-files

Remove files ending with "Zone.Identifier" in a directory hierarchy.

** replace-in-directory

Replace all occurrences of a given string in all files within a specified
directory.

** revoke-exec-perms

Revoking exec permission for specific file extensions.

** run-command-with-notification

Notify when task is done (even if it is running in some background screen
session).

** run-remote-command

Use SSH to remotely execute a command.

** run-until-success

Run a command repeatedly until it exits with status code 0, with a timeout of 20
seconds per attempt.

** search-minified-css

Search for a term in minified CSS files.

** swap

Swap the contents of two files.

** time-run-command-100

Run a command 100 times and print its average and median execution time.

** unaccent

Replace accented characters (in ISO 8859-1 encoding) with their ASCII
equivalents.

** unbak
:PROPERTIES:
:ID:       e59bc736-4850-4ca6-b284-544b80fda95e
:END:

Restore a previously backed-up file to its original state.

See also [[id:7829854b-1ab9-4615-afa7-5647db7e08e1][bak]].

** uncolor

Strip color sequences from the input text.

** update-packages

Update package list and upgrade all installed packages to their latest versions.

* Color coding for file changes

This project uses a color-coded system to help quickly identify files based on
the age of their most recent changes.

** Color codes

| Age Range                            | Description                        | Background Color | Shell Code |
|--------------------------------------+------------------------------------+------------------+------------|
| Today's Changes (0 days)             | Changes made today                 | Deep Red         | \033[1;41m |
| Yesterday's Changes (1 day)          | Changes made yesterday             | Dark Orange      | \033[1;43m |
| Recent Changes (2-7 days)            | Changes within the past week       | Dark Yellow      | \033[1;33m |
| Moderate Age (8-30 days)             | Changes made 8 to 30 days ago      | Dark Green       | \033[1;42m |
| Moderate to Old Changes (31-90 days) | Changes made 31 to 90 days ago     | Dark Blue        | \033[1;44m |
| Old Changes (91-365 days)            | Changes made 91 days to 1 year ago | Dark Purple      | \033[1;45m |
| Older than One Year (1+ years)       | Changes made more than 1 year ago  | Gray             | \033[1;47m |

** Usage in Shell

To apply this color coding system, you can use the following shell script scrap:

#+begin_src shell
# Define color codes.
TODAY="\033[1;41m"
YESTERDAY="\033[1;43m"
RECENT="\033[1;33m"
MODERATE="\033[1;42m"
MODERATE_OLD="\033[1;44m"
OLD="\033[1;45m"
OLDER_YEAR="\033[1;47m"
RESET="\033[0m"
#+end_src

* Contribute to the project!

** Best Practices

Bash scripting can be a powerful tool for automating tasks, but it's important
to follow best practices to ensure that your scripts are efficient, reliable,
and maintainable. Here are some best practices to keep in mind:

- Use =/usr/bin/env bash= in the shebang line (more portable way to reference the
  Bash interpreter).

- Use comments to explain what the code does.

- Use variables to store values used multiple times.

- Rename variables to follow lowercase naming convention.

- Enclose variables in double quotes to prevent word splitting and globbing.

- Use functions to avoid code repetition.

  The preferred and most commonly used style in /modern shell scripting/ is:

  #+begin_src shell
  name() {
      ...
  }
  #+end_src

- Use ~set -u~ to treat unset variables as errors.

- Use ~set -e~ to exit immediately if a command fails.

- Use ~set -o pipefail~ to exit if any command in a pipeline fails.

- Use exit codes to indicate success or failure.

- Use ~printf~ instead of ~echo~ for better control over the output format.

- Use ~>&2~ to redirect output to standard error, instead of relying on
  ~/dev/stderr~, for maximum portability and clarity.

- Add a period to the end of the error messages, so that it follows grammatical
  conventions.

- Use ~grep~ with the ~-w~ flag to match whole words.

- Use ~cut~ instead of ~awk~ to extract strings.

- Use ~uniq -d~ to find duplicated strings.

- Use ~sort -u~ to sort the output and remove duplicates from a list (instead of
  ~sort | uniq~).

- Use ~$()~ instead of backticks for command substitution.

- Use double brackets (~[[ ... ]]~) in Bash and Zsh scripting for more advanced
  conditional expressions, improved handling of variables (allows unquoted
  variables and word splitting), enhanced logical operators (~&&~, ~||~), and
  built-in pattern matching, providing a more powerful and flexible approach to
  conditionals compared to single brackets (~[ ... ]~).

- Use uppercase letters for variables that are intended to be constants and not
  changed during the script execution.

- Use lowercase letters for regular variables that can be modified during the
  script execution.

By following these best practices, you can write Bash scripts that are easier to
understand, maintain, and debug.

*** Temporarily disable 'set -e' for diff command execution

#+begin_src shell
# Disable 'set -e' temporarily to handle potential errors during command execution.
set +e
diff_output=$(diff "$FILE" "$original_directory/$original_file_with_extension")
set -e
#+end_src

*** Check for required commands at the beginning

#+begin_src shell
# BSD sysexits.h exit codes.
EX_OK=0
EX_UNAVAILABLE=69

# Define color and formatting variables.
RESET=$(tput sgr0)
BOLD=$(tput bold)
WHITE=$(tput setaf 7)
RED_BG=$(tput setab 1)
ERROR="${BOLD}${WHITE}${RED_BG}"

# Check if required commands are available.
for cmd in docopts nmap; do
    if ! command -v "$cmd" > /dev/null 2>&1; then
        printf >&2 "${ERROR}ERROR: '%s' command not found.${RESET}\n" "$cmd"
        exit $EX_UNAVAILABLE            # Service unavailable.
    fi
done
#+end_src

*** Naming convention: path or directory?

If your script specifically requires a directory path and you want to avoid
ambiguity, ~DIRECTORY~ is a clearer choice.

If your script needs to accept both file and directory paths and you want to
keep the argument name more general, ~PATH~ might be more suitable.

*** Find -- Excluding Git directories and files

To exclude Git directories and files,

: find "$DIRECTORY" -type f -not -path "*/.git/*" -printf "%f\n"
: find "$DIRECTORY" -type d -name .git -prune -o -type f -printf "%f\n"

the second option with the ~-prune~ action is generally better and more efficient.

The ~-prune~ action stops find from descending into =.git= directories, making it
more efficient as it avoids unnecessary checks within these directories.

*** Notes

Writing a Bash script in functions can make the code easier to reuse, more
readable, and easier to test and debug, which can save time and reduce the
likelihood of errors.

See https://unix.stackexchange.com/questions/313256/why-write-an-entire-bash-script-in-functions

*** Code style

- Beautiful Bash: Let's make reading and writing bash scripts fun again!
  https://fr.slideshare.net/a_z_e_t/inpresentation

- Let's make better scripts
  https://downloads.cisofy.com/files/public/presentation-lets-make-better-scripts.pdf

- http://wiki.bash-hackers.org/scripting/style

- https://github.com/azet/community_bash_style_guide

- https://google-styleguide.googlecode.com/svn/trunk/shell.xml

  ~variable_name~ (preferred, ~variableName~ accepted) \\
  ~function_name~ \\
  ~CONSTANT_NAME~

*** Shell formatter + checker

- https://github.com/mvdan/sh
- https://google.github.io/styleguide/shell.xml
- https://www.shellcheck.net/ (online checker!)

http://www.skybert.net/emacs/bash-linting-in-emacs/

** Report issues and enhancements

Found a bug or have an idea for a new feature?  Share your thoughts on the
[[https://github.com/fniessen/command-line-utilities-leuven/issues/new][GitHub issue tracker]].

** Submit patches

I welcome contributions in any form!  Feel free to submit patches to enhance the
project.

** Support development with a donation!

If you find the "command-line-utilities-leuven" project (or any of
[[https://github.com/fniessen/][my other projects]]) enhancing your Shell experience and simplifying your
workflow, seize the opportunity to express your appreciation!  Help fuel future
development by making a [[https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=VCVAS6KPDQ4JC&lc=BE&item_number=command%2dline%2dutilities%2dleuven&currency_code=EUR&bn=PP%2dDonationsBF%3abtn_donate_LG%2egif%3aNonHosted][donation]] through PayPal. Your support is invaluable --
thank you!

Remember, regardless of donations, "command-line-utilities-leuven" will always
remain freely accessible, both as in Belgian beer and as in speech.

* License

Copyright (C) 2012-2025 Fabrice Niessen. All rights reserved.

Author: Fabrice Niessen \\
Keywords: command-line utilities scripts

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program.  If not, see http://www.gnu.org/licenses/.

#+html: <a href="http://opensource.org/licenses/GPL-3.0">
#+html:   <img src="http://img.shields.io/:license-gpl-blue.svg" alt=":license-gpl-blue.svg" />
#+html: </a>
#+html: <a href="https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=VCVAS6KPDQ4JC&lc=BE&item_number=command%2dline%2dutilities%2dleuven&currency_code=EUR&bn=PP%2dDonationsBF%3abtn_donate_LG%2egif%3aNonHosted">
#+html:   <img src="https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif" alt="btn_donate_LG.gif" />
#+html: </a>
